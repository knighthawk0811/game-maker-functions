/// @function						deflect(_object, _max_dis);
/// @param {Id.Instance}  _object	The Object you want to move away from
/// @param {real}  _max_dis			The distance you want to move
/// @description					find the center of self/other and move away by the given distance
function deflect(_object, _max_dis = 1)
{
	//get center of self
	var _x = ((self.bbox_right - self.bbox_left) / 2) + self.bbox_left;
	var _y = ((self.bbox_bottom - self.bbox_top) / 2) + self.bbox_top;
	
	//get center of other
	var _ox = _object.x;
	var _oy = _object.y;
	try{
		if(!variable_instance_exists(_object, bbox_left))
		{
			throw  ("NO BBOX");
		}
	}
	catch (_error)
	{
		var _object_bbox = get_instance_bbox(_object);
		_ox = ((_object_bbox[1] - _object_bbox[0]) / 2) + _object_bbox[0];
		_oy = ((_object_bbox[3] - _object_bbox[2]) / 2) + _object_bbox[2];
	}

	//get direction to move away
	var _away = point_direction(_ox,_oy,_x,_y);
	
	return move_direction(_away, _max_dis);
}


/// @function						get_instance_bbox(_inst);
/// @param {Id.Instance}  _inst		The Object you want to get the bbox for
/// @description					find the left,right,top,bottom bboxes
function get_instance_bbox(_inst) {
    var _spr = _inst.sprite_index;
    if (_spr == -1) {
        // Fallback if no sprite
        return [_inst.x, _inst.x, _inst.y, _inst.y];
    }
    
    var _width = sprite_get_width(_spr) * abs(_inst.image_xscale);
    var _height = sprite_get_height(_spr) * abs(_inst.image_yscale);
    var _origin_x = sprite_get_xoffset(_spr);
    var _origin_y = sprite_get_yoffset(_spr);
    
    // Calculate bbox based on origin point
    var _left = _inst.x - _origin_x;
    var _right = _left + _width;
    var _top = _inst.y - _origin_y;
    var _bottom = _top + _height;
    
    return [_left, _right, _top, _bottom];
}
