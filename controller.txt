//code for using controllers in your game

///Controller object
//obj_controller


//CREATE EVENT
//controller arrays
controllers = [];
controllers_mapped = [];
//test if there is a valid controller available
function valid()
{
	if(array_length(controllers) > 0 && gamepad_is_connected(controllers[0]))	
	{
		return true;	
	}
	return false;
}


//Async System EVENT

//controller plugged/unplugged
switch(async_load[? "event_type"])   
{
	case "gamepad discovered":  
	    var _pad_index = async_load[? "pad_index"];
	    gamepad_set_axis_deadzone(_pad_index, 0.1);
		gamepad_set_button_threshold(_pad_index, 0.1);
	    array_push(controllers, _pad_index);		
	    var _controller_index = array_get_index(controllers, _pad_index);
				
		if(_pad_index >= 4)
		{
			var _controller_guid = gamepad_get_guid(_pad_index);
			//USB Retro Gamepad
			controllers_mapped[_controller_index] = true;
			gamepad_test_mapping(_pad_index, _controller_guid + 
			",USB Retro Gamepad,platform:Windows,a:b1,b:b2,x:b0,y:b3,leftshoulder:b4,rightshoulder:b5,lefttrigger:b6,righttrigger:b7,start:b9,guide:b8,lefty:a4,leftx:a3,");
		}
		
		/*
		//custom mapping
		//output the existing mapping & GUID
		//then modify the map below
		show_debug_message(gamepad_get_guid(_pad_index));
		show_debug_message(gamepad_get_mapping(_pad_index)); 
		if(gamepad_get_guid(_pad_index) == "03000000790000001100000000000000" )
		{
			//CUSTOM Controller Mapping
			controllers_mapped[_controller_index] = true;
			gamepad_test_mapping(_pad_index,
			"03000000790000001100000000000000,CUSTOM Controller,platform:Windows,a:b1,b:b2,x:b0,y:b3,leftshoulder:b4,rightshoulder:b5,lefttrigger:b6,righttrigger:b7,start:b9,guide:b8,lefty:a4,leftx:a3,");
		}
		//*/
	break;
	
	case "gamepad lost":  
	    var _pad_index = async_load[? "pad_index"];
	    var _controller_index = array_get_index(controllers, _pad_index);
	    array_delete(controllers, _controller_index, 1);
	break;
}


//Draw GUI

//optional for testing controller buttons
//*
draw_set_color(c_black);
var _num = 0;
var _xx = 130;
var _yy = 70;
var _line_height = 16;

if(view_visible[0])
{
	var _camera = view_get_camera(0); // get camera object
	_xx += camera_get_view_x(_camera);
	_yy += camera_get_view_y(_camera);
}

for (var i = 0; i < 12; i++;)
{
	if gamepad_is_connected(i)
    {
    _num = 1;
    draw_text(_xx, _yy + (_line_height * _num++), "CONTROLLER" );
    draw_text(_xx, _yy + (_line_height * _num++), "Gamepad Slot - " + string(i));
    draw_text(_xx, _yy + (_line_height * _num++), "Gamepad Type - " + string(gamepad_get_description(i)));
    draw_text(_xx, _yy + (_line_height * _num++), "Gamepad GUID - " + string(gamepad_get_guid(i)));
    draw_text(_xx, _yy + (_line_height * _num++), "Button Count - " + string(gamepad_button_count(i)));
    draw_text(_xx, _yy + (_line_height * _num++), "Axis Count - " + string(gamepad_axis_count(i)));
    draw_text(_xx, _yy + (_line_height * _num++), "Face 1 - " + string(gamepad_button_check(i, gp_face1)));
    draw_text(_xx, _yy + (_line_height * _num++), "Face 2 - " + string(gamepad_button_check(i, gp_face2)));
    draw_text(_xx, _yy + (_line_height * _num++), "Face 3 - " + string(gamepad_button_check(i, gp_face3)));
    draw_text(_xx, _yy + (_line_height * _num++), "Face 4 - " + string(gamepad_button_check(i, gp_face4)));
    draw_text(_xx, _yy + (_line_height * _num++), "D-Pad up - " + string(gamepad_button_check(i, gp_padu)));
    draw_text(_xx, _yy + (_line_height * _num++), "D-Pad down - " + string(gamepad_button_check(i, gp_padd)));
    draw_text(_xx, _yy + (_line_height * _num++), "D-Pad left - " + string(gamepad_button_check(i, gp_padl)));
    draw_text(_xx, _yy + (_line_height * _num++), "D-Pad right - " + string(gamepad_button_check(i, gp_padr)));   
    draw_text(_xx, _yy + (_line_height * _num++), "Left H Axis - " + string(gamepad_axis_value(i, gp_axislh)));
    draw_text(_xx, _yy + (_line_height * _num++), "Left V Axis - " + string(gamepad_axis_value(i, gp_axislv)));
    draw_text(_xx, _yy + (_line_height * _num++), "Right H Axis - " + string(gamepad_axis_value(i, gp_axisrh)));
    draw_text(_xx, _yy + (_line_height * _num++), "Right V Axis - " + string(gamepad_axis_value(i, gp_axisrv))); 
    draw_text(_xx, _yy + (_line_height * _num++), "Stick L - " + string(gamepad_button_check(i, gp_stickl)));
    draw_text(_xx, _yy + (_line_height * _num++), "Stick R - " + string(gamepad_button_check(i, gp_stickr)));
    draw_text(_xx, _yy + (_line_height * _num++), "Shoulder L - " + string(gamepad_button_check(i, gp_shoulderl)));
    draw_text(_xx, _yy + (_line_height * _num++), "Shoulder LB - " + string(gamepad_button_check(i, gp_shoulderlb)));
    draw_text(_xx, _yy + (_line_height * _num++), "Shoulder R - " + string(gamepad_button_check(i, gp_shoulderr)));
    draw_text(_xx, _yy + (_line_height * _num++), "Shoulder RB - " + string(gamepad_button_check(i, gp_shoulderrb)));
    draw_text(_xx, _yy + (_line_height * _num++), "Select - " + string(gamepad_button_check(i, gp_select)));
    draw_text(_xx, _yy + (_line_height * _num++), "Start - " + string(gamepad_button_check(i, gp_start)));
    }
}
//*/


/// player object movement in the step event
//controller movement
if (instance_exists(obj_controller) && obj_controller.valid())
{		    
	
	image_index = 1;
	// prime the temp values
	_up = 0;
	_down = 0;
	_left = 0;
	_right = 0;
	_hspd = 0;
	_vspd = 0;
	//XInput or DirectInput?
	//XInput uses 0-3
	//DirectInput uses 4-20
			
	//which controller are we using?
	if( (obj_controller.controllers[0] < 4) || (obj_controller.controllers_mapped[0] == true) )
	{
		//XInput Controller	
		//or
		//custom mapped controller	
		
		//D-pad 
		//0 or 1 for each direction
		if(gamepad_button_check(obj_controller.controllers[0], gp_padu)){
			_up = 1;
		}						
		if(gamepad_button_check(obj_controller.controllers[0], gp_padd)){
			_down = 1;
		}	
		if(gamepad_button_check(obj_controller.controllers[0], gp_padl)){
			_left = 1;
		}				
		if(gamepad_button_check(obj_controller.controllers[0], gp_padr)){
			_right = 1;
		}			
		//d-pad has movement?
		if(_up != 0 || _down != 0 || _right != 0 || _left != 0)	
		{
			// combine to get horizontal and vertical directions
			_hspd = _right - _left;
			_vspd = _down - _up;
		}
		else
		{
			//use the axis
			_vspd = gamepad_axis_value(obj_controller.controllers[0], gp_axislv);
			_hspd = gamepad_axis_value(obj_controller.controllers[0], gp_axislh);	
			
		}					
	}
	else
	{	
		//DirectInput Controller				
		//use D-pad, but it's different					
		//directinput controllers use a pseudo axis on the d-pad				
		//vertical
		if(gamepad_button_check(obj_controller.controllers[0], gp_padd)){
			_down = 1;
		}
		else if(!gamepad_button_check(obj_controller.controllers[0], gp_padu)){
			_up = 1;
		}
		//horizontal
		if(gamepad_button_check(obj_controller.controllers[0], gp_padr)){
			_right = 1;
		}
		else if(!gamepad_button_check(obj_controller.controllers[0], gp_padl)){
			_left = 1;
		}
		// combine to get horizontal and vertical directions
		_hspd = _right - _left;
		_vspd = _down - _up;		
	}
			
	//if there is valid movement
	if ( _hspd != 0 || _vspd != 0 )
	{
		// get absolute direction
		dir_current = point_direction(0, 0, _hspd, _vspd);
		//use custom movement function(s)
		move_slide(dir_current,speed_default);
	}
}	


//player attack on button press
//in step event
if( keyboard_check(ord("M")) || 
( instance_exists(obj_controller) && obj_controller.valid() && gamepad_button_check(obj_controller.controllers[0], gp_face1)) )
{
	//MELEE attack
}
